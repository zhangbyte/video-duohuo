// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package comment

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - CommentID
//  - ItemID
//  - UserID
//  - Text
//  - CreateTime
type Comment struct {
  CommentID *int64 `thrift:"comment_id,1" db:"comment_id" json:"comment_id,omitempty"`
  ItemID int64 `thrift:"item_id,2,required" db:"item_id" json:"item_id"`
  UserID int64 `thrift:"user_id,3,required" db:"user_id" json:"user_id"`
  Text string `thrift:"text,4,required" db:"text" json:"text"`
  CreateTime *int64 `thrift:"create_time,5" db:"create_time" json:"create_time,omitempty"`
}

func NewComment() *Comment {
  return &Comment{}
}

var Comment_CommentID_DEFAULT int64
func (p *Comment) GetCommentID() int64 {
  if !p.IsSetCommentID() {
    return Comment_CommentID_DEFAULT
  }
return *p.CommentID
}

func (p *Comment) GetItemID() int64 {
  return p.ItemID
}

func (p *Comment) GetUserID() int64 {
  return p.UserID
}

func (p *Comment) GetText() string {
  return p.Text
}
var Comment_CreateTime_DEFAULT int64
func (p *Comment) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return Comment_CreateTime_DEFAULT
  }
return *p.CreateTime
}
func (p *Comment) IsSetCommentID() bool {
  return p.CommentID != nil
}

func (p *Comment) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *Comment) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetItemID bool = false;
  var issetUserID bool = false;
  var issetText bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetItemID = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetText = true
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetItemID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemID is not set"));
  }
  if !issetUserID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"));
  }
  if !issetText{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Text is not set"));
  }
  return nil
}

func (p *Comment)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CommentID = &v
}
  return nil
}

func (p *Comment)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ItemID = v
}
  return nil
}

func (p *Comment)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *Comment)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Comment)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *Comment) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Comment"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Comment) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommentID() {
    if err := oprot.WriteFieldBegin("comment_id", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comment_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CommentID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comment_id: ", p), err) }
  }
  return err
}

func (p *Comment) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.item_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item_id: ", p), err) }
  return err
}

func (p *Comment) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *Comment) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  return err
}

func (p *Comment) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin("create_time", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:create_time: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.create_time (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:create_time: ", p), err) }
  }
  return err
}

func (p *Comment) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Comment(%+v)", *p)
}

// Attributes:
//  - Success
//  - Msg
type BaseResponse struct {
  Success bool `thrift:"success,1,required" db:"success" json:"success"`
  Msg *string `thrift:"msg,2" db:"msg" json:"msg,omitempty"`
}

func NewBaseResponse() *BaseResponse {
  return &BaseResponse{}
}


func (p *BaseResponse) GetSuccess() bool {
  return p.Success
}
var BaseResponse_Msg_DEFAULT string
func (p *BaseResponse) GetMsg() string {
  if !p.IsSetMsg() {
    return BaseResponse_Msg_DEFAULT
  }
return *p.Msg
}
func (p *BaseResponse) IsSetMsg() bool {
  return p.Msg != nil
}

func (p *BaseResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSuccess bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSuccess = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSuccess{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"));
  }
  return nil
}

func (p *BaseResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *BaseResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = &v
}
  return nil
}

func (p *BaseResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BaseResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err) }
  if err := oprot.WriteBool(bool(p.Success)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err) }
  return err
}

func (p *BaseResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMsg() {
    if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
    if err := oprot.WriteString(string(*p.Msg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  }
  return err
}

func (p *BaseResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseResponse(%+v)", *p)
}

// Attributes:
//  - ItemID
//  - Offset
//  - Count
type GetCommentListRequest struct {
  ItemID int64 `thrift:"item_id,1,required" db:"item_id" json:"item_id"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset,omitempty"`
  Count int32 `thrift:"count,3" db:"count" json:"count,omitempty"`
}

func NewGetCommentListRequest() *GetCommentListRequest {
  return &GetCommentListRequest{
Count: 10,
}
}


func (p *GetCommentListRequest) GetItemID() int64 {
  return p.ItemID
}
var GetCommentListRequest_Offset_DEFAULT int32 = 0

func (p *GetCommentListRequest) GetOffset() int32 {
  return p.Offset
}
var GetCommentListRequest_Count_DEFAULT int32 = 10

func (p *GetCommentListRequest) GetCount() int32 {
  return p.Count
}
func (p *GetCommentListRequest) IsSetOffset() bool {
  return p.Offset != GetCommentListRequest_Offset_DEFAULT
}

func (p *GetCommentListRequest) IsSetCount() bool {
  return p.Count != GetCommentListRequest_Count_DEFAULT
}

func (p *GetCommentListRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetItemID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetItemID = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetItemID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemID is not set"));
  }
  return nil
}

func (p *GetCommentListRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ItemID = v
}
  return nil
}

func (p *GetCommentListRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *GetCommentListRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *GetCommentListRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCommentListRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetCommentListRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ItemID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.item_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item_id: ", p), err) }
  return err
}

func (p *GetCommentListRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOffset() {
    if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
    if err := oprot.WriteI32(int32(p.Offset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  }
  return err
}

func (p *GetCommentListRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCount() {
    if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
    if err := oprot.WriteI32(int32(p.Count)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  }
  return err
}

func (p *GetCommentListRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCommentListRequest(%+v)", *p)
}

// Attributes:
//  - CommentList
type GetCommentListResponse struct {
  CommentList []*Comment `thrift:"comment_list,1,required" db:"comment_list" json:"comment_list"`
}

func NewGetCommentListResponse() *GetCommentListResponse {
  return &GetCommentListResponse{}
}


func (p *GetCommentListResponse) GetCommentList() []*Comment {
  return p.CommentList
}
func (p *GetCommentListResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommentList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCommentList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommentList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommentList is not set"));
  }
  return nil
}

func (p *GetCommentListResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Comment, 0, size)
  p.CommentList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Comment{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.CommentList = append(p.CommentList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetCommentListResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCommentListResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetCommentListResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("comment_list", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comment_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommentList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CommentList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comment_list: ", p), err) }
  return err
}

func (p *GetCommentListResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCommentListResponse(%+v)", *p)
}

// Attributes:
//  - Comment
type AddCommentRequest struct {
  Comment *Comment `thrift:"comment,1,required" db:"comment" json:"comment"`
}

func NewAddCommentRequest() *AddCommentRequest {
  return &AddCommentRequest{}
}

var AddCommentRequest_Comment_DEFAULT *Comment
func (p *AddCommentRequest) GetComment() *Comment {
  if !p.IsSetComment() {
    return AddCommentRequest_Comment_DEFAULT
  }
return p.Comment
}
func (p *AddCommentRequest) IsSetComment() bool {
  return p.Comment != nil
}

func (p *AddCommentRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetComment bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComment = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetComment{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Comment is not set"));
  }
  return nil
}

func (p *AddCommentRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Comment = &Comment{}
  if err := p.Comment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Comment), err)
  }
  return nil
}

func (p *AddCommentRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddCommentRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddCommentRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("comment", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comment: ", p), err) }
  if err := p.Comment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Comment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comment: ", p), err) }
  return err
}

func (p *AddCommentRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddCommentRequest(%+v)", *p)
}

type CommentService interface {
  // Parameters:
  //  - Req
  GetCommentList(ctx context.Context, req *GetCommentListRequest) (r *GetCommentListResponse, err error)
  // Parameters:
  //  - Req
  AddComment(ctx context.Context, req *AddCommentRequest) (r *BaseResponse, err error)
}

type CommentServiceClient struct {
  c thrift.TClient
}

func NewCommentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CommentServiceClient {
  return &CommentServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCommentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CommentServiceClient {
  return &CommentServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCommentServiceClient(c thrift.TClient) *CommentServiceClient {
  return &CommentServiceClient{
    c: c,
  }
}

func (p *CommentServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *CommentServiceClient) GetCommentList(ctx context.Context, req *GetCommentListRequest) (r *GetCommentListResponse, err error) {
  var _args1 CommentServiceGetCommentListArgs
  _args1.Req = req
  var _result2 CommentServiceGetCommentListResult
  if err = p.Client_().Call(ctx, "GetCommentList", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *CommentServiceClient) AddComment(ctx context.Context, req *AddCommentRequest) (r *BaseResponse, err error) {
  var _args3 CommentServiceAddCommentArgs
  _args3.Req = req
  var _result4 CommentServiceAddCommentResult
  if err = p.Client_().Call(ctx, "AddComment", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

type CommentServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CommentService
}

func (p *CommentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CommentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CommentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCommentServiceProcessor(handler CommentService) *CommentServiceProcessor {

  self5 := &CommentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self5.processorMap["GetCommentList"] = &commentServiceProcessorGetCommentList{handler:handler}
  self5.processorMap["AddComment"] = &commentServiceProcessorAddComment{handler:handler}
return self5
}

func (p *CommentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x6.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x6

}

type commentServiceProcessorGetCommentList struct {
  handler CommentService
}

func (p *commentServiceProcessorGetCommentList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CommentServiceGetCommentListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetCommentList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CommentServiceGetCommentListResult{}
var retval *GetCommentListResponse
  var err2 error
  if retval, err2 = p.handler.GetCommentList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCommentList: " + err2.Error())
    oprot.WriteMessageBegin("GetCommentList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetCommentList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type commentServiceProcessorAddComment struct {
  handler CommentService
}

func (p *commentServiceProcessorAddComment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CommentServiceAddCommentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddComment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CommentServiceAddCommentResult{}
var retval *BaseResponse
  var err2 error
  if retval, err2 = p.handler.AddComment(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddComment: " + err2.Error())
    oprot.WriteMessageBegin("AddComment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AddComment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type CommentServiceGetCommentListArgs struct {
  Req *GetCommentListRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewCommentServiceGetCommentListArgs() *CommentServiceGetCommentListArgs {
  return &CommentServiceGetCommentListArgs{}
}

var CommentServiceGetCommentListArgs_Req_DEFAULT *GetCommentListRequest
func (p *CommentServiceGetCommentListArgs) GetReq() *GetCommentListRequest {
  if !p.IsSetReq() {
    return CommentServiceGetCommentListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CommentServiceGetCommentListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CommentServiceGetCommentListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetCommentListRequest{
  Count: 10,
}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCommentList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommentServiceGetCommentListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CommentServiceGetCommentListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommentServiceGetCommentListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CommentServiceGetCommentListResult struct {
  Success *GetCommentListResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCommentServiceGetCommentListResult() *CommentServiceGetCommentListResult {
  return &CommentServiceGetCommentListResult{}
}

var CommentServiceGetCommentListResult_Success_DEFAULT *GetCommentListResponse
func (p *CommentServiceGetCommentListResult) GetSuccess() *GetCommentListResponse {
  if !p.IsSetSuccess() {
    return CommentServiceGetCommentListResult_Success_DEFAULT
  }
return p.Success
}
func (p *CommentServiceGetCommentListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CommentServiceGetCommentListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetCommentListResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCommentList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommentServiceGetCommentListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CommentServiceGetCommentListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommentServiceGetCommentListResult(%+v)", *p)
}

// Attributes:
//  - Req
type CommentServiceAddCommentArgs struct {
  Req *AddCommentRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewCommentServiceAddCommentArgs() *CommentServiceAddCommentArgs {
  return &CommentServiceAddCommentArgs{}
}

var CommentServiceAddCommentArgs_Req_DEFAULT *AddCommentRequest
func (p *CommentServiceAddCommentArgs) GetReq() *AddCommentRequest {
  if !p.IsSetReq() {
    return CommentServiceAddCommentArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CommentServiceAddCommentArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CommentServiceAddCommentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommentServiceAddCommentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &AddCommentRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CommentServiceAddCommentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddComment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommentServiceAddCommentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CommentServiceAddCommentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommentServiceAddCommentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CommentServiceAddCommentResult struct {
  Success *BaseResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCommentServiceAddCommentResult() *CommentServiceAddCommentResult {
  return &CommentServiceAddCommentResult{}
}

var CommentServiceAddCommentResult_Success_DEFAULT *BaseResponse
func (p *CommentServiceAddCommentResult) GetSuccess() *BaseResponse {
  if !p.IsSetSuccess() {
    return CommentServiceAddCommentResult_Success_DEFAULT
  }
return p.Success
}
func (p *CommentServiceAddCommentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CommentServiceAddCommentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommentServiceAddCommentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &BaseResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CommentServiceAddCommentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddComment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommentServiceAddCommentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CommentServiceAddCommentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommentServiceAddCommentResult(%+v)", *p)
}


